StateOS
---------
Free, extremely simple, amazingly tiny and very fast real-time operating system (RTOS) designed for deeply embedded applications.
Target: ARM Cortex-M family.
It was inspired by the concept of a state machine.
Procedure executed by the task (task state) doesn't have to be noreturn-type.
It will be executed into an infinite loop.
There's a dedicated function for immediate change the task state.
---------
Features:
- kernel works in preemptive or cooperative mode
- kernel can operate in tick-less mode (32-bit timer required)
- signals (auto clearing, protected)
- events
- flags (one, all, accept, ignore)
- barriers
- semaphores (binary, limited, counting)
- mutexes (recursive and priority inheritance)
- fast mutexes (non-recursive and non-priority-inheritance)
- condition variables
- memory pools
- message queues
- mailbox queues
- timers (one-shot, periodic)
- cmsis-rtos api
- nasa-osal support
- c++ wrapper
- all documentation is contained within the source files
- examples and templates are in separate repositories (https://github.com/stateos)
---------
4.3
- rebuilded internal preprocessor definitions
- rebuilded data structures
- rebuilded c++ classes
---------
4.2
- added tsk_join function
- added assertions
---------
4.1
- more kernel improvements
- new concept of task-switching for cortex-m: second try
---------
4.0
- tsk_flip is realized through core_tsk_flip function
- improved performance of kernel
---------
3.9
- added support for STM8S-Discovery board
- initiating a process stack has been removed from the context switch procedure
---------
3.8
- updated task object
- back to kernel v3.5
---------
3.7
- better integration with CMSISv5
- fixed bug in tsk_flip procedure
- added partial support for NASA Operating System Abstraction Layer
- added example for NASA OSAL
- updated timer object
---------
3.6
- new concept of task-switching: now the main task can also be restored from the main stack
- updated core and port files
---------
3.5
- updated list object
- updated memory pool object
- optimized c++ code
---------
3.4
- added list object
- added mail queue functions to cmsis_os api
- fixed bug in memory pool object
---------
3.3
- added direct signal and message transfer to task object
- added signal functions to cmsis_os api
---------
3.2
- updated memory pool object
- added memory pool examples
---------
3.1
- added CMSIS-RTOS API
- added CMSIS-RTOS example
- added memory pool object
---------
3.0
- added support for COSMIC Software CORTEX-M C Cross Compiler
---------
2.9
- program code cleaned
---------
2.8
- changed startup files
- fixed bug in core_ctx_switch for armclang and Cortex-M0
---------
2.7
- fixed some bugs in arm clang code
- fixed stack alignment
- fixed some bugs
---------
2.6
- added support for arm clang
---------
2.5
- idle_hook procedure moved to oskernel
- simplified kernel code
---------
2.4
- kernel optimalization
---------
2.3
- example files moved to dedicated folder
- changed makefiles
- optimized kernel
---------
2.2
- minor update
- added c and c++ examples
- tsk_stop function doesn't destroy the stack storage
---------
2.1
- reorganization of the c++ code
- fixed bug in MessageQueueT<> class
- fixed bug in MailBoxQueueT<> class
- added c++ examples
---------
2.0
- added some features to c++ code
- added c++ examples
- added c++ class destructors guarding
---------
1.9
- added fast mutex object
- fast mutex is non-recursive and non-priority-inheritance
- added example for new feature
- fixed bug in semaphore initialization
- removed mutex type from mutex initializer
- mutex is recursive and priority inheritance
---------
1.8
- fixed bug in task initialization
- SysTick is used for triggering context switch in tick-less mode
---------
1.7
- the priority of main process is configurable
- fixed bug in startup file for armcc compiler
- fixed bug in core_sys_alloc function
---------
1.6
- fixed bug in tick-less mode
- optimized kernel
---------
1.5
- added sig_take function
- changed flag mode constants
- added some optimizations
- changed startup files
---------
1.4
- added signal object
- added example (main.c.19) for new feature
- changed flag object
---------
1.3
- rewritten memory allocation functions
- added tsk_startFrom function
- added example (main.c.18) for new feature
---------
1.2
- added new features for use in 'C' code only
- added examples (main.c.14-17) for some of new features
---------
1.1
- all comments have been translated into English and rewritten in interface files as documentation
- definitions and functions for creating semaphore now include the initial value of the semaphore counter
---------
1.0
- first stable version
- to do: translate comments into English
---------
0.9.5
- fixed semaphore functions
- removed semDirect constant
- fixed message queue
- fixed mailbox queue
- added message queue example (main.c.12)
- added mailbox queue example (main.c.13)
- fixed mutex
- removed tsk_force function
- lock/unlock functions moved from osport to oskernel
---------
0.9.4
- in cooperative mode context switch is realized by PendSV
- current task is a guard object in tsk_sleep function
- fixed bug with gcc -O3 optimization
- port_tsk_break renamed to core_tsk_break and rewritten in C
---------
0.9.3
- added barrier (bar) object
- added barrier example (main.c.10)
- added oslibc.c file
---------
0.9.2
- changed 'flg' procedures
- added 'flg' mode constants: flgAccept, flgClear
- added blocked mask for 'flg'
---------
0.9.1
- fix bug in non static objects definitions
- add guard object in tsk_sleep function
---------
0.9
- reorganization of the semaphore code
- added semDirect constant
- reorganization of the mutex code
---------
0.8.5d
- reorganize the file structure
- rename PRIVATE_XXX to static_XXX
---------
0.8.5c
- update makefiles
- update bitband.h
---------
0.8.5b
- more improvements in tick-less mode
- more improvements in support of virtual timers
---------
0.8.5a
- improved tick-less mode
- improved virtual timers support
- support for armv6-m and armv7-m devices at system level
---------
0.8.5
- added support for CM0, CM0+ and CM3 at system level
---------
0.8.4
- updated task startup procedures
---------
0.8.3a
- fixed bug in GRN_Led class
---------
0.8.3
- added configuration files for STM32F4_Discovery
- added configuration in example files
---------
0.8.2a
- tasks switch optimization
---------
0.8.2
- modified procedure for the preparation of the stack for new and restarted tasks
---------
0.8.1
- fixed bug in kernel function: core_tsk_prio
---------
0.8
- updated examples and several other changes
- changed 'flg' procedures
- added 'flg' mode constants: flgOne, flgAll
---------
0.7.3a
- small update for mutexes and semaphores
---------
0.7.3
- added some features to semaphores and mutexes
